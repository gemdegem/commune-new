"use strict";(()=>{var e={};e.id=724,e.ids=[724],e.modules={2934:e=>{e.exports=require("next/dist/client/components/action-async-storage.external.js")},5403:e=>{e.exports=require("next/dist/client/components/request-async-storage.external")},4580:e=>{e.exports=require("next/dist/client/components/request-async-storage.external.js")},4749:e=>{e.exports=require("next/dist/client/components/static-generation-async-storage.external")},5869:e=>{e.exports=require("next/dist/client/components/static-generation-async-storage.external.js")},399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},1017:e=>{e.exports=require("path")},7310:e=>{e.exports=require("url")},6369:(e,n,t)=>{t.r(n),t.d(n,{GlobalError:()=>a.a,__next_app__:()=>h,originalPathname:()=>m,pages:()=>c,routeModule:()=>u,tree:()=>d});var o=t(7096),s=t(6132),r=t(7284),a=t.n(r),l=t(2564),i={};for(let e in l)0>["default","tree","pages","GlobalError","originalPathname","__next_app__","routeModule"].indexOf(e)&&(i[e]=()=>l[e]);t.d(n,i);let d=["",{children:["docs",{children:["basics",{children:["create-commune",{children:["__PAGE__",{},{page:[()=>Promise.resolve().then(t.bind(t,6001)),"/Users/bartek/Downloads/Programowanie/Commune-fresh/frontend/src/app/docs/basics/create-commune/page.mdx"]}]},{}]},{}]},{layout:[()=>Promise.resolve().then(t.bind(t,7941)),"/Users/bartek/Downloads/Programowanie/Commune-fresh/frontend/src/app/docs/layout.tsx"],metadata:{icon:[async e=>(await Promise.resolve().then(t.bind(t,563))).default(e)],apple:[],openGraph:[],twitter:[],manifest:void 0}}]},{layout:[()=>Promise.resolve().then(t.bind(t,4959)),"/Users/bartek/Downloads/Programowanie/Commune-fresh/frontend/src/app/layout.tsx"],"not-found":[()=>Promise.resolve().then(t.t.bind(t,9291,23)),"next/dist/client/components/not-found-error"],metadata:{icon:[async e=>(await Promise.resolve().then(t.bind(t,563))).default(e)],apple:[],openGraph:[],twitter:[],manifest:void 0}}],c=["/Users/bartek/Downloads/Programowanie/Commune-fresh/frontend/src/app/docs/basics/create-commune/page.mdx"],m="/docs/basics/create-commune/page",h={require:t,loadChunk:()=>Promise.resolve()},u=new o.AppPageRouteModule({definition:{kind:s.x.APP_PAGE,page:"/docs/basics/create-commune/page",pathname:"/docs/basics/create-commune",bundlePath:"",filename:"",appPaths:[]},userland:{loaderTree:d}})},6001:(e,n,t)=>{t.r(n),t.d(n,{default:()=>MDXContent});var o=t(1837),s=t(818);function _createMdxContent(e){let n={code:"code",h1:"h1",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[o.jsx(n.h1,{children:"Create a Module"}),"\n",o.jsx(n.p,{children:"Before creating a module, we will need to go over the following:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[o.jsx(n.strong,{children:"Module Path"})," is the path from the root directory in commune to a specific module. These module paths are used to reference modules easily using a string. For instance, if a module is place in commune/model/llm, then its module path is model.llm"]}),"\n",(0,o.jsxs)(n.li,{children:[o.jsx(n.strong,{children:"Module Tree"})," is a collection of all of the module paths in your local folder. This forms a tree that is defined by the user"]}),"\n"]}),"\n",o.jsx(n.p,{children:"If a module is defined outside of the commune directory, then it will not be recorded in the module tree, but can still be used with most of the commune.Modules functions that are not related to the module tree."}),"\n",o.jsx(n.h3,{children:"Way 1: Config and Python Class"}),"\n",o.jsx(n.p,{children:"A module can be instantiated as a config paired with a python file. These are both contained within a folder as follows. In this example, we are following the buzz train and creating the Nth LLM."}),"\n",o.jsx(n.pre,{children:o.jsx(n.code,{className:"language-bash",children:"# Module path of model.llm\ncommune\\\n  model\\\n    llm\\\n      llm_model.py\n      llm_model.yaml\n"})}),"\n",(0,o.jsxs)(n.p,{children:["This creates a module path that represents the module path from commune, so in this case it would be ",o.jsx(n.strong,{children:"model.llm"})]}),"\n",o.jsx(n.p,{children:"The config and python class are as follows."}),"\n",o.jsx(n.pre,{children:o.jsx(n.code,{className:"language-yaml",children:'"model": "text-davinci-003"\n"tokenizer": "gpt2"\n'})}),"\n",o.jsx(n.pre,{children:o.jsx(n.code,{className:"language-python",children:"import commune as c\nclass LLM(c.Module):\n  def __init__(self,config=None):\n    # set the config , if None, use the default yaml\n    self.set_config(config)\n\n    # do whatever the fuck else you want\n    self.set_tokenizer(self.config.tokenizer)\n    self.set_model(self.config.model)\n  def set_model(model:str):\n    ...\n  def set_tokenizer(tokenizer: str):\n    ...\n\n\n"})}),"\n",o.jsx(n.h3,{children:"Way 2: Python only, no config"}),"\n",o.jsx(n.p,{children:"Now lets define the same module without a config for those that hate configs."}),"\n",o.jsx(n.pre,{children:o.jsx(n.code,{className:"language-bash",children:"# Module path of model.llm\ncommune\\\n  model\\\n    llm.py\n"})}),"\n",o.jsx(n.p,{children:"With the python file being"}),"\n",o.jsx(n.pre,{children:o.jsx(n.code,{className:"language-python",children:"import commune as c\nclass LLM(c.Module):\n  def __init__(self, model='text-davinci-003', tokenizer='gpt2'):\n    # note how we dont need to set the config\n    self.set_tokenizer(tokenizer)\n    self.set_model(model)\n  def set_model(model:str):\n    ...\n  def set_tokenizer(tokenizer: str):\n    ...\n\n\n"})}),"\n",o.jsx(n.p,{children:"If you want your module to be contianed within a directory without affecting the module path"})]})}function MDXContent(e={}){let{wrapper:n}={...(0,s.a)(),...e.components};return n?o.jsx(n,{...e,children:o.jsx(_createMdxContent,{...e})}):_createMdxContent(e)}}};var n=require("../../../../webpack-runtime.js");n.C(e);var __webpack_exec__=e=>n(n.s=e),t=n.X(0,[975,323,837,429,603,333],()=>__webpack_exec__(6369));module.exports=t})();