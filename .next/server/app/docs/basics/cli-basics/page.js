"use strict";(()=>{var e={};e.id=521,e.ids=[521],e.modules={2934:e=>{e.exports=require("next/dist/client/components/action-async-storage.external.js")},5403:e=>{e.exports=require("next/dist/client/components/request-async-storage.external")},4580:e=>{e.exports=require("next/dist/client/components/request-async-storage.external.js")},4749:e=>{e.exports=require("next/dist/client/components/static-generation-async-storage.external")},5869:e=>{e.exports=require("next/dist/client/components/static-generation-async-storage.external.js")},399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},1017:e=>{e.exports=require("path")},7310:e=>{e.exports=require("url")},4625:(e,n,o)=>{o.r(n),o.d(n,{GlobalError:()=>t.a,__next_app__:()=>p,originalPathname:()=>h,pages:()=>d,routeModule:()=>m,tree:()=>l});var s=o(7096),a=o(6132),r=o(7284),t=o.n(r),i=o(2564),c={};for(let e in i)0>["default","tree","pages","GlobalError","originalPathname","__next_app__","routeModule"].indexOf(e)&&(c[e]=()=>i[e]);o.d(n,c);let l=["",{children:["docs",{children:["basics",{children:["cli-basics",{children:["__PAGE__",{},{page:[()=>Promise.resolve().then(o.bind(o,571)),"/Users/bartek/Downloads/Programowanie/Commune-fresh/frontend/src/app/docs/basics/cli-basics/page.mdx"]}]},{}]},{}]},{layout:[()=>Promise.resolve().then(o.bind(o,7941)),"/Users/bartek/Downloads/Programowanie/Commune-fresh/frontend/src/app/docs/layout.tsx"],metadata:{icon:[async e=>(await Promise.resolve().then(o.bind(o,563))).default(e)],apple:[],openGraph:[],twitter:[],manifest:void 0}}]},{layout:[()=>Promise.resolve().then(o.bind(o,4959)),"/Users/bartek/Downloads/Programowanie/Commune-fresh/frontend/src/app/layout.tsx"],"not-found":[()=>Promise.resolve().then(o.t.bind(o,9291,23)),"next/dist/client/components/not-found-error"],metadata:{icon:[async e=>(await Promise.resolve().then(o.bind(o,563))).default(e)],apple:[],openGraph:[],twitter:[],manifest:void 0}}],d=["/Users/bartek/Downloads/Programowanie/Commune-fresh/frontend/src/app/docs/basics/cli-basics/page.mdx"],h="/docs/basics/cli-basics/page",p={require:o,loadChunk:()=>Promise.resolve()},m=new s.AppPageRouteModule({definition:{kind:a.x.APP_PAGE,page:"/docs/basics/cli-basics/page",pathname:"/docs/basics/cli-basics",bundlePath:"",filename:"",appPaths:[]},userland:{loaderTree:l}})},571:(e,n,o)=>{o.r(n),o.d(n,{default:()=>MDXContent});var s=o(1837),a=o(818);function _createMdxContent(e){let n={code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,a.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[s.jsx(n.h1,{children:"The PyParse CLI"}),"\n",(0,s.jsxs)(n.p,{children:["We have a pythonic cli for commune, which is a wrapper around the ",s.jsx(n.code,{children:"c.Module"})," library. This is a simple way to interact with the commune library. This does not need to be formated like argparse, and is more like a pythonic cli, where you can test out the functions and modules."]}),"\n",s.jsx(n.p,{children:"The template for the cli is as follows:"}),"\n",s.jsx(n.pre,{children:s.jsx(n.code,{className:"language-bash",children:"c {module_name} {function_name} *args **kwargs\n"})}),"\n",s.jsx(n.p,{children:"For example, the following command:"}),"\n",s.jsx(n.pre,{children:s.jsx(n.code,{className:"language-python",children:'import commune as c\nc.modules("model")\n'})}),"\n",s.jsx(n.p,{children:"is the same as"}),"\n",s.jsx(n.pre,{children:s.jsx(n.code,{className:"language-bash",children:"c modules model\n"})}),"\n",s.jsx(n.h2,{children:"Using the cli to interact with your modules"}),"\n",(0,s.jsxs)(n.p,{children:["You can use the cli to interact with your modules. For example, if you have a module called ",s.jsx(n.code,{children:"demo"}),", you can use the cli to interact with it."]}),"\n",s.jsx(n.p,{children:"For instance, to get the config of the model.openai module, you can use the following command:"}),"\n",s.jsx(n.pre,{children:s.jsx(n.code,{className:"language-bash",children:"c model.openai config\n"})}),"\n",s.jsx(n.p,{children:"This is the same as the following python code:"}),"\n",s.jsx(n.pre,{children:s.jsx(n.code,{className:"language-python",children:'import commune as c\nc.module("model.openai").config()\n'})}),"\n",s.jsx(n.h2,{children:"Serving"}),"\n",(0,s.jsxs)(n.p,{children:["You can also serve your modules using the cli. For example, if you have a module called ",s.jsx(n.code,{children:"demo"}),", you can serve it using the following command:"]}),"\n",s.jsx(n.pre,{children:s.jsx(n.code,{className:"language-bash",children:"c demo serve tag=latest\n"})}),"\n",s.jsx(n.p,{children:"This is the same as the following python code:"}),"\n",s.jsx(n.pre,{children:s.jsx(n.code,{className:"language-python",children:'import commune as c\nc.module("demo").serve(tag="latest")\n'})}),"\n",s.jsx(n.h2,{children:"Why did we make this instead of using Argparse?"}),"\n",s.jsx(n.p,{children:"Argparse is a great library, but it is not very pythonic, and it is not very easy to use. You also have to write a lot of boilerplate code to get it to work, which is not very fun."}),"\n",s.jsx(n.p,{children:"Our New Pyparse It is a simple way to interact with the commune library. This does not need to be formated like argparse, and is more like a pythonic cli, where you can test out the functions and modules."})]})}function MDXContent(e={}){let{wrapper:n}={...(0,a.a)(),...e.components};return n?s.jsx(n,{...e,children:s.jsx(_createMdxContent,{...e})}):_createMdxContent(e)}}};var n=require("../../../../webpack-runtime.js");n.C(e);var __webpack_exec__=e=>n(n.s=e),o=n.X(0,[975,323,837,429,603,333],()=>__webpack_exec__(4625));module.exports=o})();